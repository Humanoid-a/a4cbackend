# Generated by Django 5.2 on 2025-05-26 05:21

import backend.models
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="School",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("school_id", models.CharField(max_length=200)),
                ("name", models.CharField(max_length=200)),
                ("location", models.CharField(blank=True, default="", max_length=300)),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="SchoolParams",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("school_id", models.CharField(max_length=200)),
                ("acceptance_rate", models.FloatField()),
                ("tuition", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="FrontendUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("biography", models.TextField(blank=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sat_reading",
                    models.PositiveSmallIntegerField(
                        help_text="SAT Reading score, 200–800 in 10‑point increments",
                        validators=[
                            django.core.validators.MinValueValidator(200),
                            django.core.validators.MaxValueValidator(800),
                            backend.models.StepValidator(10),
                        ],
                    ),
                ),
                (
                    "sat_math",
                    models.PositiveSmallIntegerField(
                        help_text="SAT Math score, 200–800 in 10‑point increments",
                        validators=[
                            django.core.validators.MinValueValidator(200),
                            django.core.validators.MaxValueValidator(800),
                            backend.models.StepValidator(10),
                        ],
                    ),
                ),
                (
                    "gpa",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="GPA on a 0.00–4.00 scale in 0.05 increments",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("4.00")),
                            backend.models.StepValidator(Decimal("0.05")),
                        ],
                    ),
                ),
                (
                    "intended_major",
                    models.CharField(
                        choices=[
                            ("STEM", "Science, Technology, Engineering, Math"),
                            ("LAH", "Liberal Arts & Humanities"),
                        ],
                        default="STEM",
                        help_text="Intended college major",
                        max_length=4,
                    ),
                ),
                (
                    "recommendation_strength",
                    models.PositiveSmallIntegerField(
                        help_text="How strong the recommendation is (1–4)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "nationality",
                    django_countries.fields.CountryField(
                        blank=True,
                        help_text="Country of nationality",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Non-binary"),
                            ("N", "Prefer not to say"),
                        ],
                        default="O",
                        help_text="Gender identity",
                        max_length=1,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
